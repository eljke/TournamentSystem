package ru.eljke.tournamentsystem.model;

import com.fasterxml.jackson.annotation.JsonFormat;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.persistence.*;
import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.PastOrPresent;
import jakarta.validation.constraints.Size;
import lombok.*;

import java.time.LocalDate;
import java.util.Objects;

@Entity(name = "members")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Schema(description = "Member details")
public class Member {
    @Schema(name = "Autogenerated ID", requiredMode = Schema.RequiredMode.REQUIRED)
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id")
    private Long id;
    @Schema(name = "Member username", requiredMode = Schema.RequiredMode.REQUIRED)
    @Column(name = "username", unique = true)
    @Size(min = 3, max = 16, message = "Username should be at least ${min} symbols")
    private String username;
    @Schema(name = "Member firstname", requiredMode = Schema.RequiredMode.REQUIRED)
    @Column(name = "firstname", nullable = false)
    private String firstname;
    @Schema(name = "Member lastname", requiredMode = Schema.RequiredMode.REQUIRED)
    @Column(name = "lastname", nullable = false)
    private String lastname;
    @Schema(name = "Member patronymic", requiredMode = Schema.RequiredMode.REQUIRED)
    @Column(name = "patronymic", nullable = false)
    private String patronymic;
    @Schema(requiredMode = Schema.RequiredMode.REQUIRED, example = "dd/MM/yyyy")
    @JsonFormat(pattern = "dd/MM/yyyy")
    @PastOrPresent
    @Column(name = "date_of_birth", nullable = false)
    private LocalDate dateOfBirth;
    @Column(name = "phone")
    private String phone;
    @Email
    @Column(name = "email")
    private String email;
    @Schema(name = "Member password", requiredMode = Schema.RequiredMode.REQUIRED)
    @Column(name = "password", nullable = false)
    private String password;
    @Schema(name = "Member city", requiredMode = Schema.RequiredMode.REQUIRED)
    @Column(name = "city", nullable = false)
    private String city;
    @Schema(name = "Member school", requiredMode = Schema.RequiredMode.REQUIRED)
    @Column(name = "school", nullable = false)
    private String school;
    @Schema(name = "Member grade", requiredMode = Schema.RequiredMode.REQUIRED)
    @Column(name = "grade", nullable = false)
    private String grade;

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Member member = (Member) o;
        return Objects.equals(id, member.id) && Objects.equals(username, member.username) && Objects.equals(firstname, member.firstname) && Objects.equals(lastname, member.lastname) && Objects.equals(patronymic, member.patronymic) && Objects.equals(dateOfBirth, member.dateOfBirth) && Objects.equals(phone, member.phone) && Objects.equals(email, member.email) && Objects.equals(password, member.password) && Objects.equals(city, member.city) && Objects.equals(school, member.school) && Objects.equals(grade, member.grade);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, username, firstname, lastname, patronymic, dateOfBirth, phone, email, password, city, school, grade);
    }
}
